p1x: `WINDOW_WIDTH * 0.25`
p2x: `WINDOW_WIDTH * 0.75`
py: `WINDOW_HEIGHT - R('Player').radius`
petecaX: `WINDOW_WIDTH * 0.5`
petecaY: 120
metersByPixel: 60

gamepaused: `OPTIONS_MENU.isOpen`
gameover: true

messages: `R("score.data")`
options: `R("options.save")`
controlMap: `R("control_map.data")`
refreshMusic: `do
    BGM.playing = options.MUSIC
end`

refreshcontroller: `do
    local p1, p2 = options.P1_DEVICE, options.P2_DEVICE
    if p1 == 0 then
        P1_CONTROLLER.scheme = p1 == p2 and 'keyboard1' or 'keyboard'
    else
        P1_CONTROLLER.scheme = p1 == p2 and 'gamepad1' or 'gamepad'
    end
    P1_CONTROLLER.device_index = p1

    if p2 == 0 then
        P2_CONTROLLER.scheme = p1 == p2 and 'keyboard2' or 'keyboard'
    else
        P2_CONTROLLER.scheme = p1 == p2 and 'gamepad2' or 'gamepad'
    end
    P2_CONTROLLER.device_index = p2
end`

preinit: `do
    love.physics.setMeter(metersByPixel)
end`

init: `do
    love.graphics.setBackgroundColor(0.12, 0.12, 0.12)
    self:reset()
    OPTIONS_MENU:toggleCollapsed()
end`

reset: `do
    peteca.body.position = { petecaX, petecaY }
    peteca.body.angle = 0
    peteca.body.angularVelocity = 0
    peteca.body.linearVelocity = { 0, 0.1 }
    peteca.lastToHit = nil

    player1.body.position = { p1x, py }
    player1.body.linearVelocity = { 0, 0.1 }
    player1.body.angle = 0
    player1.body.angularVelocity = 0
    player1:reset()

    player2.body.position = { p2x, py }
    player2.body.linearVelocity = { 0, 0.1 }
    player2.body.angle = 0
    player2.body.angularVelocity = 0
    player2:reset()
end`

keypressed: `do
    local self, key, scancode, isrepeat = ...
    if key == 'm' then
        OPTIONS_MENU.MENU.MUSIC:toggle()
    elseif key == 'return' or key == 'kpenter' then
        self:togglepause()
    end
end`

gamepadpressed: `do
    local self, joystick, button = ...
    if button == 'start' then
        self:togglepause()
    end
end`

togglepause: `do
    if not OPTIONS_MENU.isOpen then
        OPTIONS_MENU.message = messages.pauseText
    end
    OPTIONS_MENU:toggleCollapsed()
    if self.gameover then
        self:reset()
        self.gameover = false
    end
end`

setPlayerWon: `do
    local self, winning = ...
    self.gameover = true
    OPTIONS_MENU.message = messages.wonTextFmt:format(winning)
    OPTIONS_MENU:toggleCollapsed()
end`

[AudioSource id: BGM
    source: `R("Stack-fase.ogg")`
    playing: `options.MUSIC` looping: true
]

[World id: WORLD yg: `9.81 * metersByPixel`
    paused: `root.gamepaused or root.gameover`

    [Arena id: arena]

    [PlayerController id: P1_CONTROLLER]
    [PlayerController id: P2_CONTROLLER]

    [Player id: player1 color: [0 1 0]
        rotateValue: `P1_CONTROLLER.value`
        otherPlayer: `player2`
        "set gameover": `do if value then root:setPlayerWon(2) end end`
    ]
    [Player id: player2 color: [1 1 0] flipX: true
        rotateValue: `P2_CONTROLLER.value`
        otherPlayer: `player1`
        "set gameover": `do if value then root:setPlayerWon(1) end end`
    ]
    [Peteca id: peteca x: `petecaX` y: `petecaY`]

    [CollisionTracker a: [tag: PETECA] b: [tag: GROUND]
        beginContact: `do set(peteca, 'lastToHit', 'otherPlayer', 'takingDamage', true) end`
        endContact: `do set(peteca, 'lastToHit', 'otherPlayer', 'takingDamage', false) end`
        postSolve: `do peteca:impulse(contact:getNormal()) end`
    ]
    [CollisionTracker a: [tag: PETECA] b: [tag: RACKET]
        postSolve: `do a.root.lastToHit = b.root end`
    ]
    [CollisionTracker a: [tag: PETECA] b: [tag: BODY]
        beginContact: `do b.root.takingDamage = true end`
        endContact: `do b.root.takingDamage = false end`
    ]
]

[LifeBar anchor: [0 0 0 0.4] margin: [10 10] height: 15
    color: `player1.color`
    maxLife: `player1.maxLife`
    currentLife: `player1.currentLife`
    takingDamage: `player1.takingDamage`
]
[Transform x: `WINDOW_WIDTH` sx: -1 sy: 1
    [LifeBar anchor: [0 0 0 0.4] margin: [10 10] height: 15
        color: `player2.color`
        maxLife: `player2.maxLife`
        currentLife: `player2.currentLife`
        takingDamage: `player2.takingDamage`
    ]
]

[CollapsableOptionsMenu id: OPTIONS_MENU
    message: `messages.initialText`
    ontogglemusic: `root.refreshMusic`
    oncontrollerchange: `root.refreshcontroller`
]

